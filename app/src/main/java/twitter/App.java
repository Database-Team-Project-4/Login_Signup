/*
 * This source file was generated by the Gradle 'init' task
 */
package twitter;

import twitter.service.postService;
import twitter.service.userService;

import java.sql.*;
import java.util.Scanner;

public class App {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Connection con = null;

        userService userService = new userService();
        postService postService = new postService();

        String username = null; // use to in multiple situations

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            //con = DriverManager.getConnection("jdbc:mysql://localhost/twitter", "root", "1234");
            con = DriverManager.getConnection("jdbc:mysql://localhost/twitter_clone", "root", "** Enter your password **");

            // need to change each local environment (change the password, connection url, and database name)

            while (true) {
                System.out.println("1. Sign Up");
                System.out.println("2. Log In");
                System.out.println("3. Exit");
                System.out.println();
                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        signUp(con, scanner, userService);
                        break;
                    case 2:
                        User currentUser = logIn(con, scanner, userService);
                        if(currentUser != null){
                            System.out.println("Welcome, " + currentUser.getName() + "!");
                            selectService(con, scanner, currentUser);
                        }
                        break;
                    case 3:
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            }


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (con != null) con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            scanner.close();
        }
    }

    private static void signUp(Connection con, Scanner scanner, userService userService) {
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();
        System.out.print("Enter your password: ");
        String password = scanner.nextLine();
        System.out.print("Enter your phone number: ");
        String phoneNumber = scanner.nextLine();

        User newUser = new User(name, password, phoneNumber);
        try {
            userService.signup(con, newUser);
        } catch (SQLException e) {
            System.out.println("Error occurred: " + e.getMessage());
        }
    }

    private static User logIn(Connection con, Scanner scanner, userService userService) {
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();
        System.out.print("Enter your password: ");
        String password = scanner.nextLine();

        User varifyUser = new User(name, password);

        try{
            return userService.login(con, varifyUser);
        } catch (SQLException e) {
            System.out.println("Error occurred: " + e.getMessage());
            return null;
        }
    }

    private static void selectService(Connection con, Scanner scanner, User currentUser) {
        while (true) {
            System.out.println("1. Post");
            System.out.println("2. Follow");
            System.out.println("3. Tag Search");
            System.out.println("4. logout");
            System.out.println();
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    post(con, scanner, currentUser);
                    break;
                case 2:
                    //follow(con, scanner, currentUser); 임시로 정의해 두었습니다.
                    break;
                case 3:
                    //tag_search(con, scanner, currentUser); 임시로 정의해 두었습니다.
                    break;
                case 4:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    public static void post(Connection con, Scanner scanner, User currentUser) {
        while(true) {
            System.out.println("1. Write a post");
            System.out.println("2. Delete a post");
            System.out.println("3. Search posts");
            System.out.println("4. Like a post");
            System.out.println("5. Back to previous menu");
            System.out.println();
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter post content: ");
                    String content = scanner.nextLine();
                    postService.writePost(con, currentUser, content); // 글 작성
                    break;
                case 2:
                    System.out.print("Enter post ID to delete: ");
                    int postIdToDelete = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    postService.deletePost(con, currentUser, postIdToDelete); // 글 삭제
                    break;
                case 3:
                    System.out.print("Enter search keyword: ");
                    String keyword = scanner.nextLine();
                    postService.searchPosts(con, keyword); // 게시글 검색
                    break;
                case 4:
                    System.out.print("Enter post ID to like: ");
                    int postIdToLike = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    postService.likePost(con, currentUser, postIdToLike); // 게시글 좋아요
                    break;
                case 5:
                    System.out.println("Returning to previous menu...");
                    return; // 이전 메뉴로 돌아감
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }


    public static void follow(Connection con, Scanner scanner, User currentUser) {
    }

    public static void tag_search(Connection con, Scanner scanner, User currentUser) {
    }




}